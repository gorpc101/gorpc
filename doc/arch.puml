@startuml

package "helloworld" {

    interface Greeter {
        +Hello(ctx, *Request) (*Response, error)
    }

    class GreeterService {
        +Hello(ctx, *Request) (*Response, error)
    }
    GreeterService --|> Greeter
    GreeterService --|> Handler
}
note right of helloworld
    通常我们由google protobuf作为IDL:
    - 指导服务api的定义
    - 指导client和server stub生成
end note

package "server" {
    interface Server {
        +Start()
        +Stop()
        +Handle(h Handler)
    }

    interface ServerModule {
        +Start()
        +Stop()
    }

    class ServerX {
        +modules []*ServerModule
        +Start()
        +Stop()
        +Handle(h Handler)
    }
    ServerX -up-|> Server
    ServerX "1" *-down- "N" ServerModule
    note right of ServerX
        包含多个ServerModule
        各ServerModule各司其职
    end note

    class PacketServer {
        svr *Server
    }
    PacketServer -up-|> ServerModule

    class StreamServer {
        svr *Server
    }
    StreamServer -up-|> ServerModule

    class HttpServer {
        svr *Server
    }
    HttpServer -up-|> ServerModule

    interface Handler {
    	Name() string
    	Handler() interface{}
    	Endpoints() []*registry.Endpoint
    	Options() HandlerOptions
    }
    Server -up-> Handler
    'note left of Handler : type GreeterService struct{} \nfunc (s *GreeterService) Hello(ctx, req) (rsp, error)

    interface Session {
        TraceContext() (interface{}, error)
        Request() interface{}
        Response() interface{}
        Logger() logger
    }
}

package "codec" {
    interface Codec {
        Encode(v interface{}) ([]byte, error)
        Decode([]byte) (Session, error)
    }
    'note bottom of Codec: Decode data as Session or ...
    Codec --> Session
    note right of Codec
       利用协议decode函数解出session
    end note

    StreamServer -down-> Codec
    PacketServer -down-> Codec
    HttpServer -down-> Codec

    GoRpcCodec --|> Codec
    SSOCodec --|> Codec

    interface GoRpcSession {
    }
    GoRpcSession --|> Session

    interface SSOSession {
    }
    SSOSession -up-|> Session
}

package "registry" {
    interface Registry {
        +Register(*Service, opts ... RegisterOption) error
        +DeRegister(*Service) error
        +GetService(string) ([]*Service, error)
        +ListServices() ([]*Service, error)
        +Watcher() (Watcher, error)
    }
    Registry "1" *-- "1" Watcher

    interface Watcher {
        +Next() (*Result, error)
        +Stop()
    }
    Watcher --> Result

    class Result {
        +Action ActionType
        +Service *Service
    }
    enum ActionType {
        CREATE
        UPDATE
        DELETE
    }
    Result --> ActionType
}



package "client" {

    interface Client {
        Invoke(ctx, req) (rsp, error)
    }

    interface Transport {
        Send(ctx, req) (rsp, error)
    }
    class TcpTransport {
        pool *TcpConnectionPool
    }
    TcpTransport "1" --> "TcpConnectionPool"
    TcpTransport -up-|> Transport

    class UdpTransport {
        pool *UdpSocketPool
    }
    UdpTransport "1" --> "UdpSocketPool"
    UdpTransport -up-|> Transport


    interface ConnectionPool {
    }
    TcpConnectionPool --|> ConnectionPool
    UdpSocketPool --|> ConnectionPool

    TcpConnectionPool "1" --> "N" Endpoint
    UdpSocketPool "1" --> "N" Endpoint

    class Endpoint {
        -conn net.Conn
        +Read([]byte) (n, error)
        +Write([]byte) (n, error)
    }

    class ClientX {
        name string
        codec Codec
        selector Selector
        trans Transport
        +Invoke(ctx, req) (rsp, error)
    }
    ClientX -left-|> Client
    ClientX -up-> Codec
    ClientX --> Transport
    ClientX --> Selector


    package "selector" {
        interface Selector {
	        Select(service string, opts ...SelectOption) (Next, error)
	        Mark(service string, node *registry.Node, err error)
	        Reset(service string)
	        Close() error
        }
        note left of Selector
            建立在名字服务至上的客户端负载均衡
        end note

        L5Selector -up-|> Selector
        CmlbSelector -up-|> Selector
        EtcdSelector -up-|> Selector
        EtcdSelector -up-> Registry
    }
}

package "trpc" {
    class GoRpc {
        +NewService(name, addr, version string)
        +Run(svr *Server)
        +NewServiceClient(name, version string)
    }
    GoRpc --> Registry
    GoRpc --> Server
    GoRpc --> Client
    note right of GoRpc
        trpc.NewService注册新服务
        Run运行服务实例
        NewClient创建rpcclient
    end note
}


package "broker" {
    interface Broker {
        ServerModule
        Subsribe(ctx, topic, gp) (<-chan interface{}, error)
        Publish(ctx, topic, req) error
    }
    Broker -up-|> ServerModule

    class BrokerHippo {
        NewBrokerHippo(masterAddr) (Broker, error)
    }
    BrokerHippo -up-|> Broker

    class BrokerKafka {
        NewBrokerKafa(masterAddr) (Broker, error)
    }
    BrokerKafka -up-|> Broker
}

package "tracing" {
    interface Tracer {
        Begin(session)
        Finish(session)
    }
    PacketServer -down-> Tracer
    StreamServer -down-> Tracer
    HttpServer -down-> Tracer

    BrokerKafka -down-> Tracer
    BrokerHippo -down-> Tracer

    ClientX -left-> Tracer

    note left of Tracer
        确定好tracing埋点位置
        traceContext由包头传递
        并寄存在session中
    end note

}

@enduml